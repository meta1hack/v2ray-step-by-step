(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{210:function(t,n,a){"use strict";a.r(n);var s=a(2),r=Object(s.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"路由规则之移动端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由规则之移动端","aria-hidden":"true"}},[t._v("#")]),t._v(" 路由规则之移动端")]),t._v(" "),a("p",[a("strong",[t._v("由于使用 V2Ray Core 的移动客户端都能直接开启 domain override，本文基本没有了参考价值。")])]),t._v(" "),a("p",[a("strong",[t._v("由于使用 V2Ray Core 的移动客户端都能直接开启 domain override，本文基本没有了参考价值。")])]),t._v(" "),a("p",[a("strong",[t._v("由于使用 V2Ray Core 的移动客户端都能直接开启 domain override，本文基本没有了参考价值。")])]),t._v(" "),a("p",[t._v("在前面的内容当中，我从来没讲过移动端的配置，是因为 Android 的客户端是直接使用 V2Ray-core，配置文件是通用的。而 iOS 的只有那么几个框可以填的，没什么可说。但是在 Android 上用过 V2Ray 的朋友可能都遇过这个问题：")]),t._v(" "),a("p",[t._v("chinasites 或者路由规则是域名的话不起作用。")]),t._v(" "),a("p",[t._v("这是因为在 Android 中，V2Ray 只能接收到目标地址是 IP 的数据，因此 chinasites 和域名规则无效。不过好在 V2Ray 后来增加了一个功能——domain overrid，它可以从这些数据中探测出域名，然后匹配相应的域名规则。但这个功能默认关闭，因此要手动开启。")]),t._v(" "),a("p",[t._v("开启 domain override 有多种方式，以下一一介绍(方式一至方式三针对的是 Actinium)。")]),t._v(" "),a("h2",{attrs:{id:"方式一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式一","aria-hidden":"true"}},[t._v("#")]),t._v(" 方式一")]),t._v(" "),a("p",[t._v("这种方式是在客户端上开启，方法是在"),a("code",[t._v("客户端")]),t._v("的 inbound(Detour) 中加入 "),a("code",[t._v('"domainOverride": ["http", "tls"]')]),t._v("，配置形如：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"routing"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"inbound"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"domainOverride"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"port"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"outbound"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"inboundDetour"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"domainOverride"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"port"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"domainOverride"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"port"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"outboundDetour"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("然而还有一个问题是 Actinium 在导入配置文件的时候会进行转换，然后 inbound 就被修改成没有 domainOverride 这一项了。也就是说如果你用 PC 上的配置直接导入到 Actinium 也是用不了 domain overrid 的。")]),t._v(" "),a("p",[t._v("不过有一个方法可以曲线救国：\n使用 "),a("a",{attrs:{href:"https://raw.githubusercontent.com/V2Ray-Android/Actinium/master/app/src/main/assets/conf_default.json",target:"_blank",rel:"noopener noreferrer"}},[t._v("Actinium 的默认配置"),a("OutboundLink")],1),t._v("，将里面所有的 inbound 和 inboundDetour 加入 "),a("code",[t._v('"domainOverride": ["http", "tls"]')]),t._v("，再将 outbound 和 routing 修改成你实际需要的配置，其它的不要动。修改完之后再导入 Actinium 中，Actinium 不会改你的文件了。")]),t._v(" "),a("h2",{attrs:{id:"方式二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式二","aria-hidden":"true"}},[t._v("#")]),t._v(" 方式二")]),t._v(" "),a("p",[t._v("因为 domain override 是在 inbound 上设置的，因此也可以在服务器上开启。但要注意的是在服务器使用 domain overrid 比较适用的规则是 blackhole，因为如果是要直连的话，数据包已经发给了服务器，这个时候的服务直连对于客户端来说也是走代理了，除非你这个服务器是中转节点。")]),t._v(" "),a("h2",{attrs:{id:"方式三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式三","aria-hidden":"true"}},[t._v("#")]),t._v(" 方式三")]),t._v(" "),a("p",[t._v("下载并启用全局复制（https://play.google.com/store/apps/details?id=com.camel.corp.universalcopy）\n先在 Actinium 直接导入配置文件，并将其转化为 Actinium 格式。\n然后在 Actinium 主界面点击此配置文件查看，使用全局复制将其复制出来，另存为另一个json文件。\n在新保存的json文件里加入 Domain Override 并导入 Actinium，即可实现此功能。")]),t._v(" "),a("h2",{attrs:{id:"v2rayng"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v2rayng","aria-hidden":"true"}},[t._v("#")]),t._v(" V2RayNG")]),t._v(" "),a("p",[t._v("V2RayNG 是另一个基于 V2Ray 内核的 Android 应用，从某个版本可以导入配置。我简单试了一下 0.2.6 版本，可以直接导入电脑上使用的配置，也不用手动开启 domain override 就可以使用域名的路由规则，操作比 Actinium 方便些，直接使用 PC 的配置也不会造成配置文件上的割裂。不过听说分应用代理有点小问题(我试用时间不长，并不确定，说不定也可能修复了，有网友确定修复了请告之)。另外"),a("strong",[t._v("个人感觉")]),t._v(" DNS 请求时间有点长，这同样有待验证。")]),t._v(" "),a("hr"),t._v(" "),a("h4",{attrs:{id:"更新历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新历史","aria-hidden":"true"}},[t._v("#")]),t._v(" 更新历史")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("2017-08-05 增加可以在服务器上使用 domain override 的内容")])]),t._v(" "),a("li",[a("p",[t._v("2017-11-16 增加Actinium和全局复制搭配使用 domain override 的内容，并修正部分拼写错误")])]),t._v(" "),a("li",[a("p",[t._v("2017-11-28 增加 V2RayNG")])]),t._v(" "),a("li",[a("p",[t._v("2017-12-11 本文相当失效")])])])])},[],!1,null,null,null);n.default=r.exports}}]);